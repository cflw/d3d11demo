#include <cflw图形_d3d着色器.h>
#include "图形.h"
#include "常量.h"
namespace 着色器 = cflw::图形::d3d着色器;
void C图形::f初始化(HWND a窗口) {
	m三维.f初始化(a窗口);
	auto &v渲染控制 = m三维.fg渲染控制();
	auto &v渲染状态 = m三维.fg渲染状态();
	auto &v缓冲工厂 = m三维.fg缓冲工厂();
	auto &v纹理工厂 = m三维.fg纹理工厂();
	三维::C顶点格式 v顶点格式;
	三维::tp输入布局 v输入布局;
	v顶点格式.f添加(三维::C顶点格式::e位置, 3);
	//v顶点格式.f添加(三维::C顶点格式::e纹理, 3);
	着色器::C着色器工厂 v着色器工厂;
	v着色器工厂.f初始化();
	着色器::tp着色器 vs, ps;
	v着色器工厂.f编译顶点着色器(vs, L"着色器.hlsl", "vs");
	v着色器工厂.f编译像素着色器(ps, L"着色器.hlsl", "ps");
	m三维.f创建顶点着色器(m着色器v, 着色器::fc跨度(vs));
	m三维.f创建输入布局(v输入布局, 着色器::fc跨度(vs), v顶点格式);
	m三维.f创建像素着色器(m着色器p, 着色器::fc跨度(ps));
	v渲染控制.fs顶点着色器(m着色器v.Get());
	v渲染控制.fs像素着色器(m着色器p.Get());
	v渲染控制.fs输入布局(v输入布局.Get());
	//顶点
	struct S顶点 {
		数学::S向量3 m坐标;	//纹理方块的纹理坐标范围[-1,1], 刚好等于顶点坐标
	};
	const S顶点 va顶点[] = {
		{{-1, -1, -1}},	//0
		{{-1, -1, 1}},	//1
		{{-1, 1, -1}},	//2
		{{-1, 1, 1}},	//3
		{{1, -1, -1}},	//4
		{{1, -1, 1}},	//5
		{{1, 1, -1}},	//6
		{{1, 1, 1}}		//7
	};
	三维::tp缓冲 v顶点缓冲;
	v缓冲工厂.f创建缓冲(v顶点缓冲, va顶点, sizeof(va顶点), 三维::E缓冲::e顶点);
	v渲染控制.fs顶点缓冲(v顶点缓冲.Get(), sizeof(S顶点));
	//索引
	const uint16_t va索引[] = {
		2, 1, 0,
		2, 3, 1,
		4, 5, 6,
		5, 7, 6,
		0, 1, 4,
		1, 5, 4,
		6, 3, 2,
		6, 7, 3,
		4, 2, 0,
		4, 6, 2,
		1, 3, 5,
		3, 7, 5
	};
	三维::tp缓冲 v索引缓冲;
	v缓冲工厂.f创建缓冲(v索引缓冲, va索引, sizeof(va索引), 三维::E缓冲::e索引);
	v渲染控制.fs索引缓冲(v索引缓冲.Get());
	//常量
	m总矩阵.m世界 = m世界.ft矩阵4();
	m相机.m坐标 = {0, 0, 0};
	m相机.m目标 = {0, 0, -1};
	m相机.m上方 = {0, 1, 0};
	m总矩阵.m视图 = m相机.ft矩阵4r();
	数学::S透视投影 v投影 = {c基础宽度, c基础高度};
	m总矩阵.m投影 = v投影.ft矩阵4r();
	v缓冲工厂.f创建缓冲(m常量, &m总矩阵, sizeof(m总矩阵), 三维::E缓冲::e常量);
	v渲染控制.fs常量缓冲(0, m常量.Get());
	//纹理, 顺序: +x -x +y -y +z -z
	std::wstring_view va纹理[] = {
		L"posx.jpg",
		L"negx.jpg",
		L"posy.jpg",
		L"negy.jpg",
		L"posz.jpg",
		L"negz.jpg",
	};
	三维::tp纹理资源视图 v纹理;
	v纹理工厂.f从文件创建纹理资源视图c(v纹理, va纹理);
	v渲染控制.fs纹理(0, v纹理.Get());
	v渲染控制.fs采样器(0, v渲染状态.m采样器.m纹理.Get());
	//其它状态
	v渲染控制.fs图元拓扑(三维::E图元拓扑::e列表三角形);
	v渲染控制.fs光栅化(v渲染状态.m光栅化.m反面渲染.Get());
	v渲染控制.fs混合(v渲染状态.m混合.m开启透明.Get());
	v渲染控制.fs深度模板(v渲染状态.m深度模板.m正常深度r.Get());
}
void C图形::f销毁() {
	m着色器v.Reset();
	m着色器p.Reset();
	m常量.Reset();
	m三维.f销毁();
}
void C图形::f计算() {
	m时间 += c帧秒;
}
void C图形::f更新() {
	auto &v渲染控制 = m三维.fg渲染控制();
	const 数学::S向量2 v方向 = 数学::S向量2::fc方向r(1, m时间 * 0.1f);
	m相机.m目标.x = v方向.x;
	m相机.m目标.z = v方向.y;
	m总矩阵.m视图 = m相机.ft矩阵4r();
	m总矩阵.m世界 = m世界.ft矩阵4();
	v渲染控制.f更新资源(m常量.Get(), &m总矩阵);
}
void C图形::f显示() {
	auto &v渲染控制 = m三维.fg渲染控制();
	v渲染控制.f清屏();
	v渲染控制.f绘制索引(36);
	v渲染控制.f显示();
}