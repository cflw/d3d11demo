#include <cflw图形_d3d着色器.h>
#include <cflw文件_obj模型.h>
#include <cflw图形_dx纹理.h>
#include "图形.h"
#include "常量.h"
namespace 着色器 = cflw::图形::d3d着色器;
namespace 模型 = cflw::文件::obj;
namespace 纹理 = cflw::图形::dx纹理;
void C图形::f初始化(HWND a窗口) {
	m三维.f初始化(a窗口);
	m窗口大小 = m三维.fg窗口大小();
	auto &v渲染控制 = m三维.fg渲染控制();
	auto &v渲染状态 = m三维.fg渲染状态();
	auto &v缓冲工厂 = m三维.fg缓冲工厂();
	auto &v纹理工厂 = m三维.fg纹理工厂();
	三维::C顶点格式 v顶点格式;
	v顶点格式.f添加(三维::C顶点格式::e位置, 3);
	v顶点格式.f添加(三维::C顶点格式::e法线, 3);
	v顶点格式.f添加(三维::C顶点格式::e纹理, 2);
	着色器::C着色器工厂 v着色器工厂;
	v着色器工厂.f初始化();
	着色器::tp着色器 vs, ps;
	v着色器工厂.f编译顶点着色器(vs, L"着色器.hlsl", "vs");
	v着色器工厂.f编译像素着色器(ps, L"着色器.hlsl", "ps");
	m三维.f创建顶点着色器(m物体v, 着色器::fc跨度(vs));
	m三维.f创建输入布局(m物体布局, 着色器::fc跨度(vs), v顶点格式);
	m三维.f创建像素着色器(m物体p, 着色器::fc跨度(ps));
	v着色器工厂.f编译像素着色器(ps, L"着色器.hlsl", "ps_shadow");
	m三维.f创建像素着色器(m阴影p, 着色器::fc跨度(ps));
	v顶点格式.f清空();
	v顶点格式.f添加(三维::C顶点格式::e位置, 3);
	v顶点格式.f添加(三维::C顶点格式::e颜色, 4);
	v着色器工厂.f编译顶点着色器(vs, L"着色器.hlsl", "vs_solid");
	v着色器工厂.f编译像素着色器(ps, L"着色器.hlsl", "ps_solid");
	m三维.f创建顶点着色器(m固体v, 着色器::fc跨度(vs));
	m三维.f创建输入布局(m固体布局, 着色器::fc跨度(vs), v顶点格式);
	m三维.f创建像素着色器(m固体p, 着色器::fc跨度(ps));
	//顶点
	模型::C对象模型 v模型;
	v模型.f打开(L"立方体.obj");
	std::vector<S物体顶点> va顶点;
	for (const auto &v索引 : v模型.ma索引) {
		S物体顶点 v顶点;
		const auto &v顶点坐标 = v模型.fg顶点(v索引);
		v顶点.m坐标 = {v顶点坐标.x, v顶点坐标.y, v顶点坐标.z};
		const auto &v法线坐标 = v模型.fg法线(v索引);
		v顶点.m法线 = {v法线坐标.x, v法线坐标.y, v法线坐标.z};
		const auto &v纹理坐标 = v模型.fg纹理(v索引);
		v顶点.m纹理 = {v纹理坐标.u, v纹理坐标.v};
		va顶点.push_back(v顶点);
	}
	v缓冲工厂.f创建缓冲(m立方体顶点, va顶点.data(), sizeof(S物体顶点) * va顶点.size(), 三维::E缓冲::e顶点);
	//平面
	constexpr float c平面高度 = -3.f;
	constexpr float c平面半边长 = 5;
	S固体顶点 va平面顶点[] = {
		{数学::S向量3(-c平面半边长, c平面高度, -c平面半边长), 数学::S颜色::c绿},
		{数学::S向量3(c平面半边长, c平面高度, -c平面半边长), 数学::S颜色::c绿},
		{数学::S向量3(-c平面半边长, c平面高度, c平面半边长), 数学::S颜色::c绿},
		{数学::S向量3(c平面半边长, c平面高度, c平面半边长), 数学::S颜色::c绿},
	};
	v缓冲工厂.f创建缓冲(m平面顶点, va平面顶点, sizeof(va平面顶点), 三维::E缓冲::e顶点);
	std::uint16_t va平面索引[] = {
		0, 1, 2,
		1, 3, 2,
	};
	v缓冲工厂.f创建缓冲(m平面索引, va平面索引, sizeof(va平面索引), 三维::E缓冲::e索引);
	m阴影平面 = 数学::S平面3::fc点法(数学::S向量3(0, c平面高度 + 0.01f, 0), 数学::S向量3(0, 1, 0));	//阴影平面稍微比固体平面高一点
	//常量
	m矩阵数据.m世界 = m物体.ft矩阵4();
	数学::S相机 v相机;
	v相机.m坐标 = {0, 0, 5};
	v相机.m目标 = {0, 0, 0};
	v相机.m上方 = {0, 1, 0};
	m矩阵数据.m视图 = v相机.ft矩阵4r();
	数学::S投影 v投影;
	v投影 = 数学::S投影(m窗口大小.x, m窗口大小.y);
	m矩阵数据.m投影 = v投影.ft矩阵4r();
	v缓冲工厂.f创建缓冲(m矩阵常量, &m矩阵数据, sizeof(m矩阵数据), 三维::E缓冲::e常量);
	v渲染控制.fs常量缓冲(0, m矩阵常量.Get());
	//光照
	m光照数据.m光方向 = 数学::S向量4(0, -2, 0, 1).fg三维归一();
	m光照数据.m光颜色 = 数学::S颜色::c白;
	v缓冲工厂.f创建缓冲(m光照常量, &m光照数据, sizeof(m光照数据), 三维::E缓冲::e常量);
	v渲染控制.fs常量缓冲(1, m光照常量.Get());
	//纹理
	三维::tp纹理 v纹理;
	纹理::C自定义纹理 v自定义纹理;
	v自定义纹理.f初始化(1, 1);
	v自定义纹理.fg像素(0, 0) = 数学::S颜色::c白;
	v纹理工厂.f从纹理对象创建纹理(v纹理, v自定义纹理);
	v渲染控制.fs纹理(0, v纹理.Get());
	v渲染控制.fs采样器(0, v渲染状态.m采样器.m纹理.Get());
	//其它状态
	v渲染控制.fs图元拓扑(三维::E图元拓扑::e列表三角形);
	v渲染控制.fs混合(v渲染状态.m混合.m开启透明.Get());
	v渲染控制.fs深度模板(v渲染状态.m深度模板.m正常深度r.Get());
}
void C图形::f销毁() {
	m物体v.Reset();
	m物体p.Reset();
	m三维.f销毁();
}
void C图形::f计算() {
	m时间 += c帧秒;
	m物体.m旋转.x = m时间 * 0.9f;
	m物体.m旋转.y = m时间 * 0.5f;
	m物体.m旋转.z = m时间 * 0.2f;
	//m光照数据.m光方向 = 数学::S向量4(cos(m时间), -2, sin(m时间), 1).fg三维归一();
}
void C图形::f更新() {
}
void C图形::f显示() {
	auto &v渲染控制 = m三维.fg渲染控制();
	auto &v渲染状态 = m三维.fg渲染状态();
	v渲染控制.f清屏();
	//平面
	m矩阵数据.m世界 = 数学::S矩阵4::c单位;
	v渲染控制.f更新资源(m矩阵常量.Get(), &m矩阵数据);
	v渲染控制.fs顶点着色器(m固体v.Get());
	v渲染控制.fs输入布局(m固体布局.Get());
	v渲染控制.fs像素着色器(m固体p.Get());
	v渲染控制.fs光栅化(v渲染状态.m光栅化.m默认.Get());
	v渲染控制.fs顶点缓冲(m平面顶点.Get(), sizeof(S固体顶点));
	v渲染控制.fs索引缓冲(m平面索引.Get());
	v渲染控制.f绘制索引(6);
	//物体
	const 数学::S矩阵4 v物体矩阵 = m物体.ft矩阵4();;
	m矩阵数据.m世界 = v物体矩阵;
	v渲染控制.f更新资源(m矩阵常量.Get(), &m矩阵数据);
	v渲染控制.fs顶点着色器(m物体v.Get());
	v渲染控制.fs输入布局(m物体布局.Get());
	v渲染控制.fs像素着色器(m物体p.Get());
	v渲染控制.fs光栅化(v渲染状态.m光栅化.m反面渲染.Get());
	v渲染控制.fs顶点缓冲(m立方体顶点.Get(), sizeof(S物体顶点));
	v渲染控制.f绘制(36);
	//阴影
	const 数学::S矩阵4 v阴影矩阵 = 数学::S矩阵4::fc阴影(m阴影平面, 数学::S向量4(-m光照数据.m光方向.x, -m光照数据.m光方向.y, -m光照数据.m光方向.z, 0));
	m矩阵数据.m世界 = v阴影矩阵 * v物体矩阵;
	v渲染控制.f更新资源(m矩阵常量.Get(), &m矩阵数据);
	v渲染控制.fs像素着色器(m阴影p.Get());
	v渲染控制.f绘制(36);
	//结束
	v渲染控制.f显示();
}