#include <cflw图形_d3d着色器.h>
#include "图形.h"
#include "常量.h"
namespace 着色器 = cflw::图形::d3d着色器;
void C图形::f初始化(HWND a窗口) {
	m三维.f初始化(a窗口);
	auto &v渲染控制 = m三维.fg渲染控制();
	auto &v渲染状态 = m三维.fg渲染状态();
	auto &v缓冲工厂 = m三维.fg缓冲工厂();
	//圆
	三维::C顶点格式 v顶点格式;
	v顶点格式.f添加(三维::C顶点格式::e位置, 2);
	v顶点格式.f添加(三维::C顶点格式::e位置, 2);
	v顶点格式.f添加(三维::C顶点格式::e颜色, 4);
	着色器::C着色器工厂 v着色器工厂;
	v着色器工厂.f初始化();
	着色器::tp着色器 vs, gs, ps;
	v着色器工厂.f编译顶点着色器(vs, L"圆.hlsl", "vs");
	v着色器工厂.f编译几何着色器(gs, L"圆.hlsl", "gs");
	v着色器工厂.f编译像素着色器(ps, L"圆.hlsl", "ps");
	三维::S图形管线参数 v图形管线;
	v图形管线.fs顶点着色器(着色器::fc跨度(vs));
	v图形管线.fs几何着色器(着色器::fc跨度(gs));
	v图形管线.fs像素着色器(着色器::fc跨度(ps));
	v图形管线.fs输入布局(v顶点格式);
	v图形管线.fs光栅化(v渲染状态.m光栅化.m显示隐藏面.Get());
	v图形管线.fs混合(v渲染状态.m混合.m颜色叠加.Get());
	v图形管线.fs深度模板(v渲染状态.m深度模板.m正常深度r.Get());
	m三维.f创建图形管线(m圆管线, v图形管线);
	//光
	v着色器工厂.f编译顶点着色器(vs, L"光.hlsl", "vs");
	v着色器工厂.f编译几何着色器(gs, L"光.hlsl", "gs");
	v着色器工厂.f编译像素着色器(ps, L"光.hlsl", "ps");
	v图形管线.fs顶点着色器(着色器::fc跨度(vs));
	v图形管线.fs几何着色器(着色器::fc跨度(gs));
	v图形管线.fs像素着色器(着色器::fc跨度(ps));
	v图形管线.fs输入布局(v顶点格式);
	m三维.f创建图形管线(m光管线, v图形管线);
	//缓冲
	m窗口常量.m窗口大小 = {c基础范围x, c基础范围y};
	v缓冲工厂.f创建缓冲(m常量缓冲0, &m窗口常量, sizeof(m窗口常量), 三维::E缓冲::e常量);
	v渲染控制.fs常量缓冲(0, m常量缓冲0.Get());
	v缓冲工厂.f创建缓冲(m常量缓冲1, nullptr, sizeof(m圆常量), 三维::E缓冲::e常量);
	v渲染控制.fs常量缓冲(1, m常量缓冲1.Get());
	v缓冲工厂.f创建缓冲(m顶点缓冲, m顶点数据, sizeof(m顶点数据), 三维::E缓冲::e顶点);
	v渲染控制.fs顶点缓冲(m顶点缓冲.Get(), sizeof(S顶点));
	//粒子
	m粒子管理.f初始化();
}
void C图形::f销毁() {
	m三维.f销毁();
}
void C图形::f计算() {
	m粒子管理.f计算();
}
void C图形::f更新() {

}
void C图形::f显示() {
	auto &v渲染控制 = m三维.fg渲染控制();
	v渲染控制.f清屏();
	//圆
	for (int i = 0; i != c圆数量; ++i) {
		C圆 &v圆 = m粒子管理.ma圆[i];
		m顶点数据[i] = v圆.fg顶点();
		m圆常量[i] = v圆.fg常量();
	}
	v渲染控制.f更新资源(m顶点缓冲.Get(), m顶点数据);
	v渲染控制.f更新资源(m常量缓冲1.Get(), m圆常量);
	v渲染控制.fs图形管线(*m圆管线);
	v渲染控制.fs图元拓扑(三维::E图元拓扑::e列表点);
	v渲染控制.f绘制(c圆数量);
	//光
	for (int i = 0; i != c光数量; ++i) {
		m顶点数据[i * 2] = m粒子管理.ma光[i].fg顶点0();
		m顶点数据[i * 2 + 1] = m粒子管理.ma光[i].fg顶点1();
	}
	v渲染控制.f更新资源(m顶点缓冲.Get(), m顶点数据);
	v渲染控制.fs图形管线(*m光管线);
	v渲染控制.fs图元拓扑(三维::E图元拓扑::e列表线段);
	v渲染控制.f绘制(c光数量 * 2);
	//结束
	v渲染控制.f显示();
}