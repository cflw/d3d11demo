#include <cflw图形_d3d着色器.h>
#include "图形.h"
#include "常量.h"
namespace 着色器 = cflw::图形::d3d着色器;
void C图形::f初始化(HWND a窗口) {
	m三维.f初始化(a窗口);
	auto &v渲染控制 = m三维.fg渲染控制();
	auto &v渲染状态 = m三维.fg渲染状态();
	auto &v缓冲工厂 = m三维.fg缓冲工厂();
	auto &v纹理工厂 = m三维.fg纹理工厂();
	三维::C顶点格式 v顶点格式;
	三维::tp输入布局 v输入布局;
	v顶点格式.f添加(三维::C顶点格式::e位置, 2);
	v顶点格式.f添加(三维::C顶点格式::e纹理, 2);
	着色器::C着色器工厂 v着色器工厂;
	v着色器工厂.f初始化();
	着色器::tp着色器 vs, ps;
	v着色器工厂.f编译顶点着色器(vs, L"着色器.hlsl", "vs");
	v着色器工厂.f编译像素着色器(ps, L"着色器.hlsl", "ps");
	m三维.f创建顶点着色器(m着色器v, 着色器::fc跨度(vs));
	m三维.f创建输入布局(v输入布局, 着色器::fc跨度(vs), v顶点格式);
	m三维.f创建像素着色器(m着色器p, 着色器::fc跨度(ps));
	v渲染控制.fs顶点着色器(m着色器v.Get());
	v渲染控制.fs像素着色器(m着色器p.Get());
	v渲染控制.fs输入布局(v输入布局.Get());
	//顶点
	struct S顶点 {
		数学::S向量2 m坐标;
		数学::S向量2 m纹理;
	};
	constexpr float c图形尺寸 = 128;
	S顶点 va顶点[4] = {
		{{-c图形尺寸, c图形尺寸}, {0, 0}},
		{{c图形尺寸, c图形尺寸}, {1, 0}},
		{{-c图形尺寸, -c图形尺寸}, {0, 1}},
		{{c图形尺寸, -c图形尺寸}, {1, 1}},
	};
	三维::tp缓冲 v顶点缓冲;
	v缓冲工厂.f创建缓冲(v顶点缓冲, va顶点, sizeof(va顶点), 三维::E缓冲::e顶点);
	v渲染控制.fs顶点缓冲(v顶点缓冲.Get(), sizeof(S顶点));
	//索引
	三维::t索引 va索引[] = {
		0, 1, 2,
		1, 3, 2,
	};
	三维::tp缓冲 v索引缓冲;
	v缓冲工厂.f创建缓冲(v索引缓冲, va索引, sizeof(va索引), 三维::E缓冲::e索引);
	v渲染控制.fs索引缓冲(v索引缓冲.Get());
	//常量
	数学::S向量2 v常量 = {c基础范围x, c基础范围y};
	v缓冲工厂.f创建缓冲(m常量, &v常量, sizeof(v常量), 三维::E缓冲::e常量);
	v渲染控制.fs常量缓冲(0, m常量.Get());
	//纹理
	三维::tp纹理资源视图 v纹理;
	std::wstring_view va纹理文件名[] = {
		L"纹理1.png",
		L"纹理2.png",
		L"纹理3.png",
		L"纹理4.png",
	};
	v纹理工厂.f从文件创建纹理资源视图a(v纹理, va纹理文件名, 4);
	v渲染控制.fs纹理(0, v纹理.Get());
	v渲染控制.fs采样器(0, v渲染状态.m采样器.m图案.Get());
	//其它状态
	v渲染控制.fs图元拓扑(三维::E图元拓扑::e列表三角形);
	v渲染控制.fs光栅化(v渲染状态.m光栅化.m默认.Get());
	v渲染控制.fs混合(v渲染状态.m混合.m开启透明.Get());
	v渲染控制.fs深度模板(v渲染状态.m深度模板.m正常深度r.Get());
}
void C图形::f销毁() {
	m着色器v.Reset();
	m着色器p.Reset();
	m三维.f销毁();
}
void C图形::f计算() {
}
void C图形::f更新() {
}
void C图形::f显示() {
	auto &v渲染控制 = m三维.fg渲染控制();
	v渲染控制.f清屏();
	v渲染控制.f绘制索引(6);
	v渲染控制.f显示();
}