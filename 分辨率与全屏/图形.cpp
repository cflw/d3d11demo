#include "图形.h"
void C图形::f初始化(HWND a窗口) {
	m三维.f初始化(a窗口);
	auto &v渲染控制 = m三维.fg渲染控制();
	auto &v渲染状态 = m三维.fg渲染状态();
	auto &v着色器工厂 = m三维.fg着色器工厂();
	auto &v缓冲工厂 = m三维.fg缓冲工厂();
	三维::C顶点格式 v顶点格式;
	v顶点格式.f添加(三维::C顶点格式::e位置, 2);
	v顶点格式.f添加(三维::C顶点格式::e颜色, 4);
	v着色器工厂.f编译并创建顶点着色器(m着色器v, L"着色器.hlsl", "vs", m输入布局, v顶点格式);
	v着色器工厂.f编译并创建像素着色器(m着色器p, L"着色器.hlsl", "ps");
	const S顶点 va顶点[] = {
		{数学::S向量2(0, 0.5f), 数学::S颜色(1, 0, 0)},
		{数学::S向量2(0.5f, -0.5f), 数学::S颜色(0, 1, 0)},
		{数学::S向量2(-0.5f, -0.5f), 数学::S颜色(0, 0, 1)}
	};
	v缓冲工厂.f创建缓冲(m顶点, va顶点, sizeof(va顶点), 三维::E缓冲::e顶点);
}
void C图形::f重置() {
	m三维.f重置屏幕资源();
}
void C图形::f销毁() {
	m着色器v.Reset();
	m着色器p.Reset();
	m输入布局.Reset();
	m顶点.Reset();
	m三维.f销毁();
}
void C图形::f计算() {

}
void C图形::f更新() {

}
void C图形::f显示() {
	auto &v渲染控制 = m三维.fg渲染控制();
	auto &v渲染状态 = m三维.fg渲染状态();
	v渲染控制.f清屏();
	v渲染控制.fs输入布局(m输入布局.Get());
	v渲染控制.fs顶点着色器(m着色器v.Get());
	v渲染控制.fs像素着色器(m着色器p.Get());
	v渲染控制.fs顶点缓冲(m顶点.Get(), sizeof(S顶点));
	v渲染控制.fs光栅化(v渲染状态.m光栅化.m显示隐藏面.Get());
	v渲染控制.fs混合(v渲染状态.m混合.m开启透明.Get());
	v渲染控制.fs深度模板(v渲染状态.m深度模板.m正常深度r.Get());
	v渲染控制.f绘制(3);
	v渲染控制.f显示();
}
void C图形::fs全屏(bool a) {
	m三维.fs全屏(a);
}
void C图形::fs窗口大小(int a宽, int a高) {
	m三维.fs窗口大小(a宽, a高);
}